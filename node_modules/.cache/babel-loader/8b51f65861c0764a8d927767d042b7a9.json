{"ast":null,"code":"import { UnexpectedNullError } from '../errors/internal-error';\nimport { EventEmitter } from './event-emitter';\n/**\n * An EventEmitter singleton that propagates events\n * across multiple windows. This is a little bit trickier since\n * windows are allowed to open childWindows in their own right.\n *\n * This means that we deal with a tree of windows. Therefore, we do the event propagation in two phases:\n *\n * - Propagate events from this layout to the parent layout\n *   - Repeat until the event arrived at the root layout\n * - Propagate events to this layout and to all children\n *   - Repeat until all layouts got the event\n *\n * **WARNING**: Only userBroadcast events are propagated between windows.\n * This means the you have to take care of propagating state changes between windows yourself.\n *\n * @public\n */\n\nexport class EventHub extends EventEmitter {\n  /**\n   * Creates a new EventHub instance\n   * @param _layoutManager - the layout manager to synchronize between the windows\n   * @internal\n   */\n  constructor(\n  /** @internal */\n  _layoutManager) {\n    super();\n    this._layoutManager = _layoutManager;\n    /** @internal */\n\n    this._childEventListener = childEvent => this.onEventFromChild(childEvent);\n\n    globalThis.addEventListener(EventHub.ChildEventName, this._childEventListener, {\n      passive: true\n    });\n  }\n  /**\n   * Emit an event and notify listeners\n   *\n   * @param eventName - The name of the event\n   * @param args - Additional arguments that will be passed to the listener\n   * @public\n   */\n\n\n  emit(eventName, ...args) {\n    if (eventName === 'userBroadcast') {\n      // Explicitly redirect the user broadcast to our overridden method.\n      this.emitUserBroadcast(...args);\n    } else {\n      super.emit(eventName, ...args);\n    }\n  }\n  /**\n   * Broadcasts a message to all other currently opened windows.\n   * @public\n   */\n\n\n  emitUserBroadcast(...args) {\n    // Step 1: Bubble up the event\n    this.handleUserBroadcastEvent('userBroadcast', args);\n  }\n  /**\n   * Destroys the EventHub\n   * @internal\n   */\n\n\n  destroy() {\n    globalThis.removeEventListener(EventHub.ChildEventName, this._childEventListener);\n  }\n  /**\n   * Internal processor to process local events.\n   * @internal\n   */\n\n\n  handleUserBroadcastEvent(eventName, args) {\n    if (this._layoutManager.isSubWindow) {\n      // We are a sub window and received an event from one of our children.\n      // So propagate it to the Root.\n      this.propagateToParent(eventName, args);\n    } else {\n      // We are the root window, propagate it to the subtree below us.\n      this.propagateToThisAndSubtree(eventName, args);\n    }\n  }\n  /**\n   * Callback for child events raised on the window\n   * @internal\n   */\n\n\n  onEventFromChild(event) {\n    const detail = event.detail;\n    this.handleUserBroadcastEvent(detail.eventName, detail.args);\n  }\n  /**\n   * Propagates the event to the parent by emitting\n   * it on the parent's DOM window\n   * @internal\n   */\n\n\n  propagateToParent(eventName, args) {\n    const detail = {\n      layoutManager: this._layoutManager,\n      eventName,\n      args: args\n    };\n    const eventInit = {\n      bubbles: true,\n      cancelable: true,\n      detail\n    };\n    const event = new CustomEvent(EventHub.ChildEventName, eventInit);\n    const opener = globalThis.opener;\n\n    if (opener === null) {\n      throw new UnexpectedNullError('EHPTP15778');\n    }\n\n    opener.dispatchEvent(event);\n  }\n  /**\n   * Propagate events to the whole subtree under this event hub.\n   * @internal\n   */\n\n\n  propagateToThisAndSubtree(eventName, args) {\n    this.emitUnknown(eventName, ...args);\n\n    for (let i = 0; i < this._layoutManager.openPopouts.length; i++) {\n      const childGl = this._layoutManager.openPopouts[i].getGlInstance();\n\n      if (childGl) {\n        childGl.eventHub.propagateToThisAndSubtree(eventName, args);\n      }\n    }\n  }\n\n}\n/** @public */\n\n(function (EventHub) {\n  /** @internal */\n  EventHub.ChildEventName = 'gl_child_event';\n})(EventHub || (EventHub = {}));","map":{"version":3,"mappings":"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","names":["UnexpectedNullError","EventEmitter","EventHub","constructor","_layoutManager","childEvent","onEventFromChild","globalThis","addEventListener","ChildEventName","_childEventListener","passive","emit","eventName","args","emitUserBroadcast","handleUserBroadcastEvent","destroy","removeEventListener","isSubWindow","propagateToParent","propagateToThisAndSubtree","event","detail","layoutManager","eventInit","bubbles","cancelable","CustomEvent","opener","dispatchEvent","emitUnknown","i","openPopouts","length","childGl","getGlInstance","eventHub"],"sourceRoot":"","sources":["../../../../src/ts/utils/event-hub.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
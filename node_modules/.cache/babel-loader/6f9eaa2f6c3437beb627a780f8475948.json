{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { ItemConfig } from '../config/config';\nimport { Splitter } from '../controls/splitter';\nimport { AssertError, UnexpectedNullError } from '../errors/internal-error';\nimport { ItemType } from '../utils/types';\nimport { getElementHeight, getElementWidth, getElementWidthAndHeight, numberToPixels, pixelsToNumber, setElementHeight, setElementWidth } from \"../utils/utils\";\nimport { ContentItem } from './content-item';\n/** @public */\n\nexport class RowOrColumn extends ContentItem {\n  /** @internal */\n  constructor(isColumn, layoutManager, config,\n  /** @internal */\n  _rowOrColumnParent) {\n    super(layoutManager, config, _rowOrColumnParent, RowOrColumn.createElement(document, isColumn));\n    this._rowOrColumnParent = _rowOrColumnParent;\n    /** @internal */\n\n    this._splitter = [];\n    this.isRow = !isColumn;\n    this.isColumn = isColumn;\n    this._childElementContainer = this.element;\n    this._splitterSize = layoutManager.layoutConfig.dimensions.borderWidth;\n    this._splitterGrabSize = layoutManager.layoutConfig.dimensions.borderGrabWidth;\n    this._isColumn = isColumn;\n    this._dimension = isColumn ? 'height' : 'width';\n    this._splitterPosition = null;\n    this._splitterMinPosition = null;\n    this._splitterMaxPosition = null;\n\n    switch (config.type) {\n      case ItemType.row:\n      case ItemType.column:\n        this._configType = config.type;\n        break;\n\n      default:\n        throw new AssertError('ROCCCT00925');\n    }\n  }\n\n  newComponent(componentType, componentState, title, index) {\n    const itemConfig = {\n      type: 'component',\n      componentType,\n      componentState,\n      title\n    };\n    return this.newItem(itemConfig, index);\n  }\n\n  addComponent(componentType, componentState, title, index) {\n    const itemConfig = {\n      type: 'component',\n      componentType,\n      componentState,\n      title\n    };\n    return this.addItem(itemConfig, index);\n  }\n\n  newItem(itemConfig, index) {\n    index = this.addItem(itemConfig, index);\n    const createdItem = this.contentItems[index];\n\n    if (ContentItem.isStack(createdItem) && ItemConfig.isComponent(itemConfig)) {\n      // createdItem is a Stack which was created to hold wanted component.  Return component\n      return createdItem.contentItems[0];\n    } else {\n      return createdItem;\n    }\n  }\n\n  addItem(itemConfig, index) {\n    this.layoutManager.checkMinimiseMaximisedStack();\n    const resolvedItemConfig = ItemConfig.resolve(itemConfig);\n    const contentItem = this.layoutManager.createAndInitContentItem(resolvedItemConfig, this);\n    return this.addChild(contentItem, index, false);\n  }\n  /**\n   * Add a new contentItem to the Row or Column\n   *\n   * @param contentItem -\n   * @param index - The position of the new item within the Row or Column.\n   *                If no index is provided the item will be added to the end\n   * @param suspendResize - If true the items won't be resized. This will leave the item in\n   *                        an inconsistent state and is only intended to be used if multiple\n   *                        children need to be added in one go and resize is called afterwards\n   *\n   * @returns\n   */\n\n\n  addChild(contentItem, index, suspendResize) {\n    // contentItem = this.layoutManager._$normalizeContentItem(contentItem, this);\n    if (index === undefined) {\n      index = this.contentItems.length;\n    }\n\n    if (this.contentItems.length > 0) {\n      const splitterElement = this.createSplitter(Math.max(0, index - 1)).element;\n\n      if (index > 0) {\n        this.contentItems[index - 1].element.insertAdjacentElement('afterend', splitterElement);\n        splitterElement.insertAdjacentElement('afterend', contentItem.element);\n      } else {\n        this.contentItems[0].element.insertAdjacentElement('beforebegin', splitterElement);\n        splitterElement.insertAdjacentElement('beforebegin', contentItem.element);\n      }\n    } else {\n      this._childElementContainer.appendChild(contentItem.element);\n    }\n\n    super.addChild(contentItem, index);\n    const newItemSize = 1 / this.contentItems.length * 100;\n\n    if (suspendResize === true) {\n      this.emitBaseBubblingEvent('stateChanged');\n      return index;\n    }\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      if (this.contentItems[i] === contentItem) {\n        contentItem[this._dimension] = newItemSize;\n      } else {\n        const itemSize = this.contentItems[i][this._dimension] *= (100 - newItemSize) / 100;\n        this.contentItems[i][this._dimension] = itemSize;\n      }\n    }\n\n    this.updateSize();\n    this.emitBaseBubblingEvent('stateChanged');\n    return index;\n  }\n  /**\n   * Removes a child of this element\n   *\n   * @param contentItem -\n   * @param keepChild - If true the child will be removed, but not destroyed\n   *\n   */\n\n\n  removeChild(contentItem, keepChild) {\n    const index = this.contentItems.indexOf(contentItem);\n    const splitterIndex = Math.max(index - 1, 0);\n\n    if (index === -1) {\n      throw new Error('Can\\'t remove child. ContentItem is not child of this Row or Column');\n    }\n    /**\n     * Remove the splitter before the item or after if the item happens\n     * to be the first in the row/column\n     */\n\n\n    if (this._splitter[splitterIndex]) {\n      this._splitter[splitterIndex].destroy();\n\n      this._splitter.splice(splitterIndex, 1);\n    }\n\n    super.removeChild(contentItem, keepChild);\n\n    if (this.contentItems.length === 1 && this.isClosable === true) {\n      const childItem = this.contentItems[0];\n      this.contentItems.length = 0;\n\n      this._rowOrColumnParent.replaceChild(this, childItem, true);\n    } else {\n      this.updateSize();\n      this.emitBaseBubblingEvent('stateChanged');\n    }\n  }\n  /**\n   * Replaces a child of this Row or Column with another contentItem\n   */\n\n\n  replaceChild(oldChild, newChild) {\n    const size = oldChild[this._dimension];\n    super.replaceChild(oldChild, newChild);\n    newChild[this._dimension] = size;\n    this.updateSize();\n    this.emitBaseBubblingEvent('stateChanged');\n  }\n  /**\n   * Called whenever the dimensions of this item or one of its parents change\n   */\n\n\n  updateSize() {\n    this.layoutManager.beginVirtualSizedContainerAdding();\n\n    try {\n      this.updateNodeSize();\n      this.updateContentItemsSize();\n    } finally {\n      this.layoutManager.endVirtualSizedContainerAdding();\n    }\n  }\n  /**\n   * Invoked recursively by the layout manager. ContentItem.init appends\n   * the contentItem's DOM elements to the container, RowOrColumn init adds splitters\n   * in between them\n   * @internal\n   */\n\n\n  init() {\n    if (this.isInitialised === true) return;\n    this.updateNodeSize();\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      this._childElementContainer.appendChild(this.contentItems[i].element);\n    }\n\n    super.init();\n\n    for (let i = 0; i < this.contentItems.length - 1; i++) {\n      this.contentItems[i].element.insertAdjacentElement('afterend', this.createSplitter(i).element);\n    }\n\n    this.initContentItems();\n  }\n\n  toConfig() {\n    const result = {\n      type: this.type,\n      content: this.calculateConfigContent(),\n      width: this.width,\n      minWidth: this.minWidth,\n      height: this.height,\n      minHeight: this.minHeight,\n      id: this.id,\n      isClosable: this.isClosable\n    };\n    return result;\n  }\n  /** @internal */\n\n\n  setParent(parent) {\n    this._rowOrColumnParent = parent;\n    super.setParent(parent);\n  }\n  /** @internal */\n\n\n  updateNodeSize() {\n    if (this.contentItems.length > 0) {\n      this.calculateRelativeSizes();\n      this.setAbsoluteSizes();\n    }\n\n    this.emitBaseBubblingEvent('stateChanged');\n    this.emit('resize');\n  }\n  /**\n   * Turns the relative sizes calculated by calculateRelativeSizes into\n   * absolute pixel values and applies them to the children's DOM elements\n   *\n   * Assigns additional pixels to counteract Math.floor\n   * @internal\n   */\n\n\n  setAbsoluteSizes() {\n    const sizeData = this.calculateAbsoluteSizes();\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      if (sizeData.additionalPixel - i > 0) {\n        sizeData.itemSizes[i]++;\n      }\n\n      if (this._isColumn) {\n        setElementWidth(this.contentItems[i].element, sizeData.totalWidth);\n        setElementHeight(this.contentItems[i].element, sizeData.itemSizes[i]);\n      } else {\n        setElementWidth(this.contentItems[i].element, sizeData.itemSizes[i]);\n        setElementHeight(this.contentItems[i].element, sizeData.totalHeight);\n      }\n    }\n  }\n  /**\n   * Calculates the absolute sizes of all of the children of this Item.\n   * @returns Set with absolute sizes and additional pixels.\n   * @internal\n   */\n\n\n  calculateAbsoluteSizes() {\n    const totalSplitterSize = (this.contentItems.length - 1) * this._splitterSize;\n    let {\n      width: totalWidth,\n      height: totalHeight\n    } = getElementWidthAndHeight(this.element);\n\n    if (this._isColumn) {\n      totalHeight -= totalSplitterSize;\n    } else {\n      totalWidth -= totalSplitterSize;\n    }\n\n    let totalAssigned = 0;\n    const itemSizes = [];\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      let itemSize;\n\n      if (this._isColumn) {\n        itemSize = Math.floor(totalHeight * (this.contentItems[i].height / 100));\n      } else {\n        itemSize = Math.floor(totalWidth * (this.contentItems[i].width / 100));\n      }\n\n      totalAssigned += itemSize;\n      itemSizes.push(itemSize);\n    }\n\n    const additionalPixel = Math.floor((this._isColumn ? totalHeight : totalWidth) - totalAssigned);\n    return {\n      itemSizes: itemSizes,\n      additionalPixel: additionalPixel,\n      totalWidth: totalWidth,\n      totalHeight: totalHeight\n    };\n  }\n  /**\n   * Calculates the relative sizes of all children of this Item. The logic\n   * is as follows:\n   *\n   * - Add up the total size of all items that have a configured size\n   *\n   * - If the total == 100 (check for floating point errors)\n   *        Excellent, job done\n   *\n   * - If the total is \\> 100,\n   *        set the size of items without set dimensions to 1/3 and add this to the total\n   *        set the size off all items so that the total is hundred relative to their original size\n   *\n   * - If the total is \\< 100\n   *        If there are items without set dimensions, distribute the remainder to 100 evenly between them\n   *        If there are no items without set dimensions, increase all items sizes relative to\n   *        their original size so that they add up to 100\n   *\n   * @internal\n   */\n\n\n  calculateRelativeSizes() {\n    let total = 0;\n    const itemsWithoutSetDimension = [];\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      if (this.contentItems[i][this._dimension] !== undefined) {\n        total += this.contentItems[i][this._dimension];\n      } else {\n        itemsWithoutSetDimension.push(this.contentItems[i]);\n      }\n    }\n    /**\n     * Everything adds up to hundred, all good :-)\n     */\n\n\n    if (Math.round(total) === 100) {\n      this.respectMinItemWidth();\n      return;\n    }\n    /**\n     * Allocate the remaining size to the items without a set dimension\n     */\n\n\n    if (Math.round(total) < 100 && itemsWithoutSetDimension.length > 0) {\n      for (let i = 0; i < itemsWithoutSetDimension.length; i++) {\n        itemsWithoutSetDimension[i][this._dimension] = (100 - total) / itemsWithoutSetDimension.length;\n      }\n\n      this.respectMinItemWidth();\n      return;\n    }\n    /**\n     * If the total is > 100, but there are also items without a set dimension left, assing 50\n     * as their dimension and add it to the total\n     *\n     * This will be reset in the next step\n     */\n\n\n    if (Math.round(total) > 100) {\n      for (let i = 0; i < itemsWithoutSetDimension.length; i++) {\n        itemsWithoutSetDimension[i][this._dimension] = 50;\n        total += 50;\n      }\n    }\n    /**\n     * Set every items size relative to 100 relative to its size to total\n     */\n\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      this.contentItems[i][this._dimension] = this.contentItems[i][this._dimension] / total * 100;\n    }\n\n    this.respectMinItemWidth();\n  }\n  /**\n   * Adjusts the column widths to respect the dimensions minItemWidth if set.\n   * @internal\n   */\n\n\n  respectMinItemWidth() {\n    const minItemWidth = this.layoutManager.layoutConfig.dimensions.minItemWidth;\n    let totalOverMin = 0;\n    let totalUnderMin = 0;\n    const entriesOverMin = [];\n    const allEntries = [];\n\n    if (this._isColumn || !minItemWidth || this.contentItems.length <= 1) {\n      return;\n    }\n\n    const sizeData = this.calculateAbsoluteSizes();\n    /**\n     * Figure out how much we are under the min item size total and how much room we have to use.\n     */\n\n    for (let i = 0; i < sizeData.itemSizes.length; i++) {\n      const itemSize = sizeData.itemSizes[i];\n      let entry;\n\n      if (itemSize < minItemWidth) {\n        totalUnderMin += minItemWidth - itemSize;\n        entry = {\n          width: minItemWidth\n        };\n      } else {\n        totalOverMin += itemSize - minItemWidth;\n        entry = {\n          width: itemSize\n        };\n        entriesOverMin.push(entry);\n      }\n\n      allEntries.push(entry);\n    }\n    /**\n     * If there is nothing under min, or there is not enough over to make up the difference, do nothing.\n     */\n\n\n    if (totalUnderMin === 0 || totalUnderMin > totalOverMin) {\n      return;\n    }\n    /**\n     * Evenly reduce all columns that are over the min item width to make up the difference.\n     */\n\n\n    const reducePercent = totalUnderMin / totalOverMin;\n    let remainingWidth = totalUnderMin;\n\n    for (let i = 0; i < entriesOverMin.length; i++) {\n      const entry = entriesOverMin[i];\n      const reducedWidth = Math.round((entry.width - minItemWidth) * reducePercent);\n      remainingWidth -= reducedWidth;\n      entry.width -= reducedWidth;\n    }\n    /**\n     * Take anything remaining from the last item.\n     */\n\n\n    if (remainingWidth !== 0) {\n      allEntries[allEntries.length - 1].width -= remainingWidth;\n    }\n    /**\n     * Set every items size relative to 100 relative to its size to total\n     */\n\n\n    for (let i = 0; i < this.contentItems.length; i++) {\n      this.contentItems[i].width = allEntries[i].width / sizeData.totalWidth * 100;\n    }\n  }\n  /**\n   * Instantiates a new Splitter, binds events to it and adds\n   * it to the array of splitters at the position specified as the index argument\n   *\n   * What it doesn't do though is append the splitter to the DOM\n   *\n   * @param index - The position of the splitter\n   *\n   * @returns\n   * @internal\n   */\n\n\n  createSplitter(index) {\n    const splitter = new Splitter(this._isColumn, this._splitterSize, this._splitterGrabSize);\n    splitter.on('drag', (offsetX, offsetY) => this.onSplitterDrag(splitter, offsetX, offsetY));\n    splitter.on('dragStop', () => this.onSplitterDragStop(splitter));\n    splitter.on('dragStart', () => this.onSplitterDragStart(splitter));\n\n    this._splitter.splice(index, 0, splitter);\n\n    return splitter;\n  }\n  /**\n   * Locates the instance of Splitter in the array of\n   * registered splitters and returns a map containing the contentItem\n   * before and after the splitters, both of which are affected if the\n   * splitter is moved\n   *\n   * @returns A map of contentItems that the splitter affects\n   * @internal\n   */\n\n\n  getItemsForSplitter(splitter) {\n    const index = this._splitter.indexOf(splitter);\n\n    return {\n      before: this.contentItems[index],\n      after: this.contentItems[index + 1]\n    };\n  }\n  /**\n   * Gets the minimum dimensions for the given item configuration array\n   * @internal\n   */\n\n\n  getMinimumDimensions(arr) {\n    var _a, _b;\n\n    let minWidth = 0;\n    let minHeight = 0;\n\n    for (let i = 0; i < arr.length; ++i) {\n      minWidth = Math.max((_a = arr[i].minWidth) !== null && _a !== void 0 ? _a : 0, minWidth);\n      minHeight = Math.max((_b = arr[i].minHeight) !== null && _b !== void 0 ? _b : 0, minHeight);\n    }\n\n    return {\n      horizontal: minWidth,\n      vertical: minHeight\n    };\n  }\n  /**\n   * Invoked when a splitter's dragListener fires dragStart. Calculates the splitters\n   * movement area once (so that it doesn't need calculating on every mousemove event)\n   * @internal\n   */\n\n\n  onSplitterDragStart(splitter) {\n    const items = this.getItemsForSplitter(splitter);\n    const minSize = this.layoutManager.layoutConfig.dimensions[this._isColumn ? 'minItemHeight' : 'minItemWidth'];\n    const beforeMinDim = this.getMinimumDimensions(items.before.contentItems);\n    const beforeMinSize = this._isColumn ? beforeMinDim.vertical : beforeMinDim.horizontal;\n    const afterMinDim = this.getMinimumDimensions(items.after.contentItems);\n    const afterMinSize = this._isColumn ? afterMinDim.vertical : afterMinDim.horizontal;\n    this._splitterPosition = 0;\n    this._splitterMinPosition = -1 * (pixelsToNumber(items.before.element.style[this._dimension]) - (beforeMinSize || minSize));\n    this._splitterMaxPosition = pixelsToNumber(items.after.element.style[this._dimension]) - (afterMinSize || minSize);\n  }\n  /**\n   * Invoked when a splitter's DragListener fires drag. Updates the splitter's DOM position,\n   * but not the sizes of the elements the splitter controls in order to minimize resize events\n   *\n   * @param splitter -\n   * @param offsetX - Relative pixel values to the splitter's original position. Can be negative\n   * @param offsetY - Relative pixel values to the splitter's original position. Can be negative\n   * @internal\n   */\n\n\n  onSplitterDrag(splitter, offsetX, offsetY) {\n    let offset = this._isColumn ? offsetY : offsetX;\n\n    if (this._splitterMinPosition === null || this._splitterMaxPosition === null) {\n      throw new UnexpectedNullError('ROCOSD59226');\n    }\n\n    offset = Math.max(offset, this._splitterMinPosition);\n    offset = Math.min(offset, this._splitterMaxPosition);\n    this._splitterPosition = offset;\n    const offsetPixels = numberToPixels(offset);\n\n    if (this._isColumn) {\n      splitter.element.style.top = offsetPixels;\n    } else {\n      splitter.element.style.left = offsetPixels;\n    }\n  }\n  /**\n   * Invoked when a splitter's DragListener fires dragStop. Resets the splitters DOM position,\n   * and applies the new sizes to the elements before and after the splitter and their children\n   * on the next animation frame\n   * @internal\n   */\n\n\n  onSplitterDragStop(splitter) {\n    if (this._splitterPosition === null) {\n      throw new UnexpectedNullError('ROCOSDS66932');\n    } else {\n      const items = this.getItemsForSplitter(splitter);\n      const sizeBefore = pixelsToNumber(items.before.element.style[this._dimension]);\n      const sizeAfter = pixelsToNumber(items.after.element.style[this._dimension]);\n      const splitterPositionInRange = (this._splitterPosition + sizeBefore) / (sizeBefore + sizeAfter);\n      const totalRelativeSize = items.before[this._dimension] + items.after[this._dimension];\n      items.before[this._dimension] = splitterPositionInRange * totalRelativeSize;\n      items.after[this._dimension] = (1 - splitterPositionInRange) * totalRelativeSize;\n      splitter.element.style.top = numberToPixels(0);\n      splitter.element.style.left = numberToPixels(0);\n      globalThis.requestAnimationFrame(() => this.updateSize());\n    }\n  }\n\n}\n/** @public */\n\n(function (RowOrColumn) {\n  /** @internal */\n  function getElementDimensionSize(element, dimension) {\n    if (dimension === 'width') {\n      return getElementWidth(element);\n    } else {\n      return getElementHeight(element);\n    }\n  }\n\n  RowOrColumn.getElementDimensionSize = getElementDimensionSize;\n  /** @internal */\n\n  function setElementDimensionSize(element, dimension, value) {\n    if (dimension === 'width') {\n      return setElementWidth(element, value);\n    } else {\n      return setElementHeight(element, value);\n    }\n  }\n\n  RowOrColumn.setElementDimensionSize = setElementDimensionSize;\n  /** @internal */\n\n  function createElement(document, isColumn) {\n    const element = document.createElement('div');\n    element.classList.add(\"lm_item\"\n    /* Item */\n    );\n\n    if (isColumn) {\n      element.classList.add(\"lm_column\"\n      /* Column */\n      );\n    } else {\n      element.classList.add(\"lm_row\"\n      /* Row */\n      );\n    }\n\n    return element;\n  }\n\n  RowOrColumn.createElement = createElement;\n})(RowOrColumn || (RowOrColumn = {}));","map":{"version":3,"mappings":"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","names":["ItemConfig","Splitter","AssertError","UnexpectedNullError","ItemType","getElementHeight","getElementWidth","getElementWidthAndHeight","numberToPixels","pixelsToNumber","setElementHeight","setElementWidth","ContentItem","RowOrColumn","constructor","isColumn","layoutManager","config","_rowOrColumnParent","createElement","document","isRow","_childElementContainer","element","_splitterSize","layoutConfig","dimensions","borderWidth","_splitterGrabSize","borderGrabWidth","_isColumn","_dimension","_splitterPosition","_splitterMinPosition","_splitterMaxPosition","type","row","column","_configType","newComponent","componentType","componentState","title","index","itemConfig","newItem","addComponent","addItem","createdItem","contentItems","isStack","isComponent","checkMinimiseMaximisedStack","resolvedItemConfig","resolve","contentItem","createAndInitContentItem","addChild","suspendResize","undefined","length","splitterElement","createSplitter","Math","max","insertAdjacentElement","appendChild","newItemSize","emitBaseBubblingEvent","i","itemSize","updateSize","removeChild","keepChild","indexOf","splitterIndex","Error","_splitter","destroy","splice","isClosable","childItem","replaceChild","oldChild","newChild","size","beginVirtualSizedContainerAdding","updateNodeSize","updateContentItemsSize","endVirtualSizedContainerAdding","init","isInitialised","initContentItems","toConfig","result","content","calculateConfigContent","width","minWidth","height","minHeight","id","setParent","parent","calculateRelativeSizes","setAbsoluteSizes","emit","sizeData","calculateAbsoluteSizes","additionalPixel","itemSizes","totalWidth","totalHeight","totalSplitterSize","totalAssigned","floor","push","total","itemsWithoutSetDimension","round","respectMinItemWidth","minItemWidth","totalOverMin","totalUnderMin","entriesOverMin","allEntries","entry","reducePercent","remainingWidth","reducedWidth","splitter","on","offsetX","offsetY","onSplitterDrag","onSplitterDragStop","onSplitterDragStart","getItemsForSplitter","before","after","getMinimumDimensions","arr","_a","_b","horizontal","vertical","items","minSize","beforeMinDim","beforeMinSize","afterMinDim","afterMinSize","style","offset","min","offsetPixels","top","left","sizeBefore","sizeAfter","splitterPositionInRange","totalRelativeSize","globalThis","requestAnimationFrame","getElementDimensionSize","dimension","setElementDimensionSize","value","classList","add"],"sourceRoot":"","sources":["../../../../src/ts/items/row-or-column.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
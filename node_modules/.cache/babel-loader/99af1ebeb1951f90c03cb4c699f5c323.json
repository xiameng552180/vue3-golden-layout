{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { ResolvedLayoutConfig } from '../config/resolved-config';\nimport { PopoutBlockedError } from '../errors/external-error';\nimport { UnexpectedNullError, UnexpectedUndefinedError } from '../errors/internal-error';\nimport { EventEmitter } from '../utils/event-emitter';\nimport { deepExtend, getUniqueId } from '../utils/utils';\n/**\n * Pops a content item out into a new browser window.\n * This is achieved by\n *\n *    - Creating a new configuration with the content item as root element\n *    - Serializing and minifying the configuration\n *    - Opening the current window's URL with the configuration as a GET parameter\n *    - GoldenLayout when opened in the new window will look for the GET parameter\n *      and use it instead of the provided configuration\n * @public\n */\n\nexport class BrowserPopout extends EventEmitter {\n  /**\n   * @param _config - GoldenLayout item config\n   * @param _initialWindowSize - A map with width, height, top and left\n   * @internal\n   */\n  constructor(\n  /** @internal */\n  _config,\n  /** @internal */\n  _initialWindowSize,\n  /** @internal */\n  _layoutManager) {\n    super();\n    this._config = _config;\n    this._initialWindowSize = _initialWindowSize;\n    this._layoutManager = _layoutManager;\n    this._isInitialised = false;\n    this._popoutWindow = null;\n    this.createWindow();\n  }\n\n  toConfig() {\n    var _a, _b;\n\n    if (this._isInitialised === false) {\n      throw new Error('Can\\'t create config, layout not yet initialised');\n    }\n\n    const glInstance = this.getGlInstance();\n    const glInstanceConfig = glInstance.saveLayout();\n    let left;\n    let top;\n\n    if (this._popoutWindow === null) {\n      left = null;\n      top = null;\n    } else {\n      left = (_a = this._popoutWindow.screenX) !== null && _a !== void 0 ? _a : this._popoutWindow.screenLeft;\n      top = (_b = this._popoutWindow.screenY) !== null && _b !== void 0 ? _b : this._popoutWindow.screenTop;\n    }\n\n    const window = {\n      width: this.getGlInstance().width,\n      height: this.getGlInstance().height,\n      left,\n      top\n    };\n    const config = {\n      root: glInstanceConfig.root,\n      openPopouts: glInstanceConfig.openPopouts,\n      settings: glInstanceConfig.settings,\n      dimensions: glInstanceConfig.dimensions,\n      header: glInstanceConfig.header,\n      window,\n      parentId: this._config.parentId,\n      indexInParent: this._config.indexInParent,\n      resolved: true\n    };\n    return config;\n  }\n\n  getGlInstance() {\n    if (this._popoutWindow === null) {\n      throw new UnexpectedNullError('BPGGI24693');\n    }\n\n    return this._popoutWindow.__glInstance;\n  }\n  /**\n   * Retrieves the native BrowserWindow backing this popout.\n   * Might throw an UnexpectedNullError exception when the window is not initialized yet.\n   * @public\n   */\n\n\n  getWindow() {\n    if (this._popoutWindow === null) {\n      throw new UnexpectedNullError('BPGW087215');\n    }\n\n    return this._popoutWindow;\n  }\n\n  close() {\n    if (this.getGlInstance()) {\n      this.getGlInstance().closeWindow();\n    } else {\n      try {\n        this.getWindow().close();\n      } catch (e) {//\n      }\n    }\n  }\n  /**\n   * Returns the popped out item to its original position. If the original\n   * parent isn't available anymore it falls back to the layout's topmost element\n   */\n\n\n  popIn() {\n    let parentItem;\n    let index = this._config.indexInParent;\n\n    if (!this._config.parentId) {\n      return;\n    }\n    /*\n    * The deepExtend call seems a bit pointless, but it's crucial to\n    * copy the config returned by this.getGlInstance().toConfig()\n    * onto a new object. Internet Explorer keeps the references\n    * to objects on the child window, resulting in the following error\n    * once the child window is closed:\n    *\n    * The callee (server [not server application]) is not available and disappeared\n    */\n\n\n    const glInstanceLayoutConfig = this.getGlInstance().saveLayout();\n    const copiedGlInstanceLayoutConfig = deepExtend({}, glInstanceLayoutConfig);\n    const copiedRoot = copiedGlInstanceLayoutConfig.root;\n\n    if (copiedRoot === undefined) {\n      throw new UnexpectedUndefinedError('BPPIR19998');\n    }\n\n    const groundItem = this._layoutManager.groundItem;\n\n    if (groundItem === undefined) {\n      throw new UnexpectedUndefinedError('BPPIG34972');\n    }\n\n    parentItem = groundItem.getItemsByPopInParentId(this._config.parentId)[0];\n    /*\n    * Fallback if parentItem is not available. Either add it to the topmost\n    * item or make it the topmost item if the layout is empty\n    */\n\n    if (!parentItem) {\n      if (groundItem.contentItems.length > 0) {\n        parentItem = groundItem.contentItems[0];\n      } else {\n        parentItem = groundItem;\n      }\n\n      index = 0;\n    }\n\n    const newContentItem = this._layoutManager.createAndInitContentItem(copiedRoot, parentItem);\n\n    parentItem.addChild(newContentItem, index);\n\n    if (this._layoutManager.layoutConfig.settings.popInOnClose) {\n      this._onClose();\n    } else {\n      this.close();\n    }\n  }\n  /**\n   * Creates the URL and window parameter\n   * and opens a new window\n   * @internal\n   */\n\n\n  createWindow() {\n    const url = this.createUrl();\n    /**\n     * Bogus title to prevent re-usage of existing window with the\n     * same title. The actual title will be set by the new window's\n     * GoldenLayout instance if it detects that it is in subWindowMode\n     */\n\n    const target = Math.floor(Math.random() * 1000000).toString(36);\n    /**\n     * The options as used in the window.open string\n     */\n\n    const features = this.serializeWindowFeatures({\n      width: this._initialWindowSize.width,\n      height: this._initialWindowSize.height,\n      innerWidth: this._initialWindowSize.width,\n      innerHeight: this._initialWindowSize.height,\n      menubar: 'no',\n      toolbar: 'no',\n      location: 'no',\n      personalbar: 'no',\n      resizable: 'yes',\n      scrollbars: 'no',\n      status: 'no'\n    });\n    this._popoutWindow = globalThis.open(url, target, features);\n\n    if (!this._popoutWindow) {\n      if (this._layoutManager.layoutConfig.settings.blockedPopoutsThrowError === true) {\n        const error = new PopoutBlockedError('Popout blocked');\n        throw error;\n      } else {\n        return;\n      }\n    }\n\n    this._popoutWindow.addEventListener('load', () => this.positionWindow(), {\n      passive: true\n    });\n\n    this._popoutWindow.addEventListener('beforeunload', () => {\n      if (this._layoutManager.layoutConfig.settings.popInOnClose) {\n        this.popIn();\n      } else {\n        this._onClose();\n      }\n    }, {\n      passive: true\n    });\n    /**\n     * Polling the childwindow to find out if GoldenLayout has been initialised\n     * doesn't seem optimal, but the alternatives - adding a callback to the parent\n     * window or raising an event on the window object - both would introduce knowledge\n     * about the parent to the child window which we'd rather avoid\n     */\n\n\n    this._checkReadyInterval = setInterval(() => this.checkReady(), 10);\n  }\n  /** @internal */\n\n\n  checkReady() {\n    if (this._popoutWindow === null) {\n      throw new UnexpectedNullError('BPCR01844');\n    } else {\n      if (this._popoutWindow.__glInstance && this._popoutWindow.__glInstance.isInitialised) {\n        this.onInitialised();\n\n        if (this._checkReadyInterval !== undefined) {\n          clearInterval(this._checkReadyInterval);\n          this._checkReadyInterval = undefined;\n        }\n      }\n    }\n  }\n  /**\n   * Serialises a map of key:values to a window options string\n   *\n   * @param windowOptions -\n   *\n   * @returns serialised window options\n   * @internal\n   */\n\n\n  serializeWindowFeatures(windowOptions) {\n    const windowOptionsString = [];\n\n    for (const key in windowOptions) {\n      windowOptionsString.push(key + '=' + windowOptions[key].toString());\n    }\n\n    return windowOptionsString.join(',');\n  }\n  /**\n   * Creates the URL for the new window, including the\n   * config GET parameter\n   *\n   * @returns URL\n   * @internal\n   */\n\n\n  createUrl() {\n    const storageKey = 'gl-window-config-' + getUniqueId();\n    const config = ResolvedLayoutConfig.minifyConfig(this._config);\n\n    try {\n      localStorage.setItem(storageKey, JSON.stringify(config));\n    } catch (e) {\n      throw new Error('Error while writing to localStorage ' + e.toString());\n    }\n\n    const url = new URL(location.href);\n    url.searchParams.set('gl-window', storageKey);\n    return url.toString();\n  }\n  /**\n   * Move the newly created window roughly to\n   * where the component used to be.\n   * @internal\n   */\n\n\n  positionWindow() {\n    if (this._popoutWindow === null) {\n      throw new Error('BrowserPopout.positionWindow: null popoutWindow');\n    } else {\n      this._popoutWindow.moveTo(this._initialWindowSize.left, this._initialWindowSize.top);\n\n      this._popoutWindow.focus();\n    }\n  }\n  /**\n   * Callback when the new window is opened and the GoldenLayout instance\n   * within it is initialised\n   * @internal\n   */\n\n\n  onInitialised() {\n    this._isInitialised = true;\n    this.getGlInstance().on('popIn', () => this.popIn());\n    this.emit('initialised');\n  }\n  /**\n   * Invoked 50ms after the window unload event\n   * @internal\n   */\n\n\n  _onClose() {\n    setTimeout(() => this.emit('closed'), 50);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["ResolvedLayoutConfig","PopoutBlockedError","UnexpectedNullError","UnexpectedUndefinedError","EventEmitter","deepExtend","getUniqueId","BrowserPopout","constructor","_config","_initialWindowSize","_layoutManager","_isInitialised","_popoutWindow","createWindow","toConfig","Error","glInstance","getGlInstance","glInstanceConfig","saveLayout","left","top","screenX","_a","screenLeft","screenY","_b","screenTop","window","width","height","config","root","openPopouts","settings","dimensions","header","parentId","indexInParent","resolved","__glInstance","getWindow","close","closeWindow","e","popIn","parentItem","index","glInstanceLayoutConfig","copiedGlInstanceLayoutConfig","copiedRoot","undefined","groundItem","getItemsByPopInParentId","contentItems","length","newContentItem","createAndInitContentItem","addChild","layoutConfig","popInOnClose","_onClose","url","createUrl","target","Math","floor","random","toString","features","serializeWindowFeatures","innerWidth","innerHeight","menubar","toolbar","location","personalbar","resizable","scrollbars","status","globalThis","open","blockedPopoutsThrowError","error","addEventListener","positionWindow","passive","_checkReadyInterval","setInterval","checkReady","isInitialised","onInitialised","clearInterval","windowOptions","windowOptionsString","key","push","join","storageKey","minifyConfig","localStorage","setItem","JSON","stringify","URL","href","searchParams","set","moveTo","focus","on","emit","setTimeout"],"sourceRoot":"","sources":["../../../../src/ts/controls/browser-popout.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
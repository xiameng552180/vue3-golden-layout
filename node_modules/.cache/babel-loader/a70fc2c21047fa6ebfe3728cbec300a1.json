{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveDynamicComponent as _resolveDynamicComponent, createBlock as _createBlock, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  style: {\n    \"position\": \"relative\"\n  }\n};\nconst _hoisted_2 = {\n  ref: \"GLRoot\",\n  style: {\n    \"position\": \"absolute\",\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nconst _hoisted_3 = {\n  style: {\n    \"position\": \"absolute\",\n    \"width\": \"100%\",\n    \"height\": \"100%\"\n  }\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createCommentVNode(\" Root dom for Golden-Layout manager \")], 512\n  /* NEED_PATCH */\n  ), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.AllComponents, pair => {\n    return _openBlock(), _createBlock($setup[\"GlComponent\"], {\n      key: pair[0],\n      ref_for: true,\n      ref: $setup.GlcKeyPrefix + pair[0]\n    }, {\n      default: _withCtx(() => [(_openBlock(), _createBlock(_resolveDynamicComponent(pair[1])))]),\n      _: 2\n      /* DYNAMIC */\n\n    }, 1024\n    /* DYNAMIC_SLOTS */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))])]);\n}","map":{"version":3,"mappings":";;AACSA,OAA0B,EAA1B;AAAA;AAAA;;;AACIC,KAAG,EAAC;AAASD,OAAqD,EAArD;AAAA;AAAA;AAAA;AAAA;;;AAGbA,OAAqD,EAArD;AAAA;AAAA;AAAA;AAAA;;;uBAJTE,oBAaM,KAbN,cAaM,CAZFC,oBAEM,KAFN,cAEM,CADFC,2DACE,CAFN;;AAAA,GAYE,EATFD,oBAQM,KARN,cAQM,oBAPFD,oBAMeG,SANf,EAMe,IANf,EAMeC,YALIC,oBAKJ,EALJC,IAAqB,IAAjB;yBADfC,aAMeF,qBANf,EAMe;AAJVG,SAAG,EAAEF,IAAI,GAIC;mBAAA;AAHVP,SAAG,EAAEM,sBAAeC,IAAI;AAGd,KANf;wBAKI,MAAqC,gBAArCC,aAAqCE,yBAArBH,IAAI,GAAiB,CAArC,CAAqC;;;;KALzC;;AAAA;GAMe,CANf;;AAAA,GAOE,EARN,CASE,CAbN","names":["style","ref","_createElementBlock","_createElementVNode","_createCommentVNode","_Fragment","_renderList","$setup","pair","_createBlock","key","_resolveDynamicComponent"],"sourceRoot":"","sources":["/Users/mengxia/Documents/ctat_vue3/src/components/Glayout.vue"],"sourcesContent":["<template>\n    <div style=\"position: relative\">\n        <div ref=\"GLRoot\" style=\"position: absolute; width: 100%; height: 100%\">\n            <!-- Root dom for Golden-Layout manager -->\n        </div>\n        <div style=\"position: absolute; width: 100%; height: 100%\">\n            <gl-component\n                v-for=\"pair in AllComponents\"\n                :key=\"pair[0]\"\n                :ref=\"GlcKeyPrefix + pair[0]\"\n            >\n                <component :is=\"pair[1]\"></component>\n            </gl-component>\n        </div>\n    </div>\n</template>\n\n<script setup>\nimport {\n    onMounted,\n    ref,\n    markRaw,\n    readonly,\n    defineExpose,\n    defineAsyncComponent,\n    defineProps,\n    nextTick,\n    getCurrentInstance,\n} from \"vue\";\nimport {\n    ComponentContainer,\n    LayoutConfig,\n    RowOrColumnItemConfig,\n    StackItemConfig,\n    ComponentItemConfig,\n    ResolvedComponentItemConfig,\n    LogicalZIndex,\n    VirtualLayout,\n    ResolvedLayoutConfig,\n} from \"golden-layout\";\nimport GlComponent from \"@/components/GlComponent.vue\";\n\n/*******************\n * Prop\n *******************/\nconst props = defineProps({\n    glcPath: String,\n});\n\n/*******************\n * Data\n *******************/\nconst GLRoot = ref(null);\nlet GLayout;\nconst GlcKeyPrefix = readonly(ref(\"glc_\"));\n\nconst MapComponents = new Map();\n\nconst AllComponents = ref(new Map());\nconst UnusedIndexes = [];\nlet CurIndex = 0;\nlet GlBoundingClientRect;\n\nconst instance = getCurrentInstance();\n\n/*******************\n * Method\n *******************/\n/** @internal */\nconst addComponent = (componentType, title) => {\n    const glc = markRaw(\n        defineAsyncComponent(\n            () => import(props.glcPath + componentType + \".vue\")\n        )\n    );\n\n    let index = CurIndex;\n    if (UnusedIndexes.length > 0) index = UnusedIndexes.pop();\n    else CurIndex++;\n\n    AllComponents.value.set(index, glc);\n\n    return index;\n};\n\nconst addGLComponent = async (componentType, title) => {\n    if (componentType.length == 0)\n        throw new Error(\"addGLComponent: Component's type is empty\");\n\n    const index = addComponent(componentType, title);\n\n    await nextTick(); // wait 1 tick for vue to add the dom\n\n    GLayout.addComponent(componentType, { refId: index }, title);\n};\n\nconst loadGLLayout = async (\n    layoutConfig\n) => {\n    GLayout.clear();\n    AllComponents.value.clear();\n\n    const config = (\n        layoutConfig.resolved\n            ? LayoutConfig.fromResolved(layoutConfig)\n            : layoutConfig\n    );\n\n    let contents = [config.root.content];\n\n    let index = 0;\n    while (contents.length > 0) {\n        const content = contents.shift();\n        for (let itemConfig of content) {\n            if (itemConfig.type == \"component\") {\n                index = addComponent(\n                    itemConfig.componentType,\n                    itemConfig.title\n                );\n                if (typeof itemConfig.componentState == \"object\")\n                    itemConfig.componentState[\"refId\"] = index;\n                else itemConfig.componentState = { refId: index };\n            } else if (itemConfig.content.length > 0) {\n                contents.push(\n                    itemConfig.content\n                );\n            }\n        }\n    }\n\n    await nextTick(); // wait 1 tick for vue to add the dom\n\n    GLayout.loadLayout(config);\n};\n\nconst getLayoutConfig = () => {\n    return GLayout.saveLayout();\n};\n\n/*******************\n * Mount\n *******************/\nonMounted(() => {\n    if (GLRoot.value == null)\n        throw new Error(\"Golden Layout can't find the root DOM!\");\n\n    const onResize = () => {\n        const dom = GLRoot.value;\n        let width = dom ? dom.offsetWidth : 0;\n        let height = dom ? dom.offsetHeight : 0;\n        GLayout.setSize(width, height);\n    };\n\n    window.addEventListener(\"resize\", onResize, { passive: true });\n\n    const handleBeforeVirtualRectingEvent = (count) => {\n        GlBoundingClientRect = (\n            GLRoot.value\n        ).getBoundingClientRect();\n    };\n\n    const handleContainerVirtualRectingRequiredEvent = (\n        container,\n        width,\n        height\n    ) => {\n        const component = MapComponents.get(container);\n        if (!component || !component?.glc) {\n            throw new Error(\n                \"handleContainerVirtualRectingRequiredEvent: Component not found\"\n            );\n        }\n\n        const containerBoundingClientRect =\n            container.element.getBoundingClientRect();\n        const left =\n            containerBoundingClientRect.left - GlBoundingClientRect.left;\n        const top = containerBoundingClientRect.top - GlBoundingClientRect.top;\n        component.glc.setPosAndSize(left, top, width, height);\n    };\n\n    const handleContainerVirtualVisibilityChangeRequiredEvent = (\n        container,\n        visible\n    ) => {\n        const component = MapComponents.get(container);\n        if (!component || !component?.glc) {\n            throw new Error(\n                \"handleContainerVirtualVisibilityChangeRequiredEvent: Component not found\"\n            );\n        }\n\n        component.glc.setVisibility(visible);\n    };\n\n    const handleContainerVirtualZIndexChangeRequiredEvent = (\n        container,\n        logicalZIndex,\n        defaultZIndex\n    ) => {\n        const component = MapComponents.get(container);\n        if (!component || !component?.glc) {\n            throw new Error(\n                \"handleContainerVirtualZIndexChangeRequiredEvent: Component not found\"\n            );\n        }\n\n        component.glc.setZIndex(defaultZIndex);\n    };\n\n    const bindComponentEventListener = (\n        container,\n        itemConfig\n    ) => {\n        let refId = -1;\n        if (itemConfig && itemConfig.componentState) {\n            refId = (itemConfig.componentState).refId;\n        } else {\n            throw new Error(\n                \"bindComponentEventListener: component's ref id is required\"\n            );\n        }\n\n        const ref = GlcKeyPrefix.value + refId;\n        const component = instance?.refs[ref][0];\n        console.log(component)\n\n        MapComponents.set(container, { refId: refId, glc: component });\n\n        container.virtualRectingRequiredEvent = (container, width, height) =>\n            handleContainerVirtualRectingRequiredEvent(\n                container,\n                width,\n                height\n            );\n\n        container.virtualVisibilityChangeRequiredEvent = (container, visible) =>\n            handleContainerVirtualVisibilityChangeRequiredEvent(\n                container,\n                visible\n            );\n\n        container.virtualZIndexChangeRequiredEvent = (\n            container,\n            logicalZIndex,\n            defaultZIndex\n        ) =>\n            handleContainerVirtualZIndexChangeRequiredEvent(\n                container,\n                logicalZIndex,\n                defaultZIndex\n            );\n\n        return {\n            component,\n            virtual: true,\n        };\n    };\n\n    const unbindComponentEventListener = (\n        container\n    ) => {\n        const component = MapComponents.get(container);\n        if (!component || !component?.glc) {\n            throw new Error(\"handleUnbindComponentEvent: Component not found\");\n        }\n\n        MapComponents.delete(container);\n        AllComponents.value.delete(component.refId);\n        UnusedIndexes.push(component.refId);\n    };\n\n    GLayout = new VirtualLayout(\n        GLRoot.value,\n        bindComponentEventListener,\n        unbindComponentEventListener\n    );\n\n    GLayout.beforeVirtualRectingEvent = handleBeforeVirtualRectingEvent;\n});\n\n/*******************\n * Expose\n *******************/\ndefineExpose({\n    addGLComponent,\n    loadGLLayout,\n    getLayoutConfig,\n});\n</script>\n"]},"metadata":{},"sourceType":"module"}